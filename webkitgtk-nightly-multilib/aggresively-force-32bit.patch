--- src/WebKit-r172617/Makefile.shared~	2014-08-08 15:22:28.000000000 +0900
+++ src/WebKit-r172617/Makefile.shared	2014-08-25 05:11:32.039364322 +0900
@@ -31,15 +31,15 @@
 	( $(SET_COLOR_DIAGNOSTICS_ARG); xcodebuild $(OTHER_OPTIONS) $(XCODE_OPTIONS) | $(OUTPUT_FILTER) && exit $${PIPESTATUS[0]} )
 
 debug d development dev develop: force
-	$(SCRIPTS_PATH)/set-webkit-configuration --debug
+	$(SCRIPTS_PATH)/set-webkit-configuration --debug --32-bit
 	( $(SET_COLOR_DIAGNOSTICS_ARG); xcodebuild $(OTHER_OPTIONS) $(XCODE_OPTIONS) | $(OUTPUT_FILTER) && exit $${PIPESTATUS[0]} )
 
 release r deployment dep deploy: force
-	$(SCRIPTS_PATH)/set-webkit-configuration --release
+	$(SCRIPTS_PATH)/set-webkit-configuration --release --32-bit
 	( $(SET_COLOR_DIAGNOSTICS_ARG); xcodebuild $(OTHER_OPTIONS) $(XCODE_OPTIONS) | $(OUTPUT_FILTER) && exit $${PIPESTATUS[0]} )
 
 analyze:
-	$(SCRIPTS_PATH)/set-webkit-configuration --release
+	$(SCRIPTS_PATH)/set-webkit-configuration --release --32-bit
 ifndef PATH_TO_SCAN_BUILD
 	( $(SET_COLOR_DIAGNOSTICS_ARG); xcodebuild $(OTHER_OPTIONS) $(XCODE_OPTIONS) RUN_CLANG_STATIC_ANALYZER=YES | $(OUTPUT_FILTER) && exit $${PIPESTATUS[0]} )
 else
--- src/WebKit-r172617/Tools/Scripts/webkitdirs.pm~	2014-08-08 15:22:30.000000000 +0900
+++ src/WebKit-r172617/Tools/Scripts/webkitdirs.pm	2014-08-25 05:19:45.933389446 +0900
@@ -320,12 +320,12 @@
         }
     } elsif (isEfl() || isGtk()) {
         my $host_processor = "";
-        $host_processor = `cmake --system-information | grep CMAKE_SYSTEM_PROCESSOR`;
-        if ($host_processor =~ m/^CMAKE_SYSTEM_PROCESSOR \"([^"]+)\"/) {
-            # We have a configured build tree; use it.
-            $architecture = $1;
-            $architecture = 'x86_64' if $architecture eq 'amd64';
-        }
+        $host_processor = `i686`;
+        #if ($host_processor =~ m/^CMAKE_SYSTEM_PROCESSOR \"([^"]+)\"/) {
+        #    # We have a configured build tree; use it.
+        #    $architecture = $1;
+        #    $architecture = 'x86_64' if $architecture eq 'amd64';
+        #}
     }
 
     if (!$architecture && (isGtk() || isAppleMacWebKit() || isEfl())) {
@@ -336,7 +336,7 @@
 
     if (!$architecture && (isGtk() || isAppleMacWebKit() || isEfl())) {
         # Fall back to output of `uname -m', if it is present.
-        $architecture = `uname -m`;
+        $architecture = `i686`;
         chomp $architecture;
     }
 
--- src/WebKit-r172617/CMakeLists.txt~	2014-08-15 02:13:39.000000000 +0900
+++ src/WebKit-r172617/CMakeLists.txt	2014-08-25 05:24:34.987404151 +0900
@@ -73,36 +73,36 @@
 # -----------------------------------------------------------------------------
 # Use MSVC_CXX_ARCHITECTURE_ID instead of CMAKE_SYSTEM_PROCESSOR when defined,
 # since the later one just resolves to the host processor on Windows.
-if (MSVC_CXX_ARCHITECTURE_ID)
-    string(TOLOWER ${MSVC_CXX_ARCHITECTURE_ID} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
-else ()
-    string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
-endif ()
-if (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
-    set(WTF_CPU_ARM 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "^aarch64")
-    set(WTF_CPU_ARM64 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "^mips")
-    set(WTF_CPU_MIPS 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "sh4")
-    set(WTF_CPU_SH4 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "(x64|x86_64|amd64)")
-    set(WTF_CPU_X86_64 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "(i[3-6]86|x86)")
+#if (MSVC_CXX_ARCHITECTURE_ID)
+#    string(TOLOWER ${MSVC_CXX_ARCHITECTURE_ID} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
+#else ()
+#    string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} LOWERCASE_CMAKE_SYSTEM_PROCESSOR)
+#endif ()
+#if (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
+#    set(WTF_CPU_ARM 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "^aarch64")
+#    set(WTF_CPU_ARM64 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "^mips")
+#    set(WTF_CPU_MIPS 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "sh4")
+#    set(WTF_CPU_SH4 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "(x64|x86_64|amd64)")
+#    set(WTF_CPU_X86_64 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "(i[3-6]86|x86)")
     set(WTF_CPU_X86 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc")
-    set(WTF_CPU_PPC 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
-    set(WTF_CPU_PPC64 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64le")
-    set(WTF_CPU_PPC64LE 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "s390")
-    set(WTF_CPU_S390 1)
-elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "s390x")
-    set(WTF_CPU_S390X 1)
-else ()
-    message(FATAL_ERROR "Unknown CPU '${LOWERCASE_CMAKE_SYSTEM_PROCESSOR}'")
-endif ()
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc")
+#    set(WTF_CPU_PPC 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
+#    set(WTF_CPU_PPC64 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64le")
+#    set(WTF_CPU_PPC64LE 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "s390")
+#    set(WTF_CPU_S390 1)
+#elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "s390x")
+#    set(WTF_CPU_S390X 1)
+#else ()
+#    message(FATAL_ERROR "Unknown CPU '${LOWERCASE_CMAKE_SYSTEM_PROCESSOR}'")
+#endif ()
 
 # -----------------------------------------------------------------------------
 # Determine the operating system
